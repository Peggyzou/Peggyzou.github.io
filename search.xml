<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git</title>
      <link href="/2023/02/25/git/"/>
      <url>/2023/02/25/git/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>git是一个免费开源的版本控制系统，有效管理项目开发的源码。<br>解决的问题：</p><ul><li>开发中代码会存在多个版本，将代码在多个版本之间进行切换</li><li>在不影响现行开发工作的情况下对代码进行维护</li><li>开发时，某段代码被多人修改时，处理代码的冲突问题</li></ul><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://git-scm.com/">Git</a>无脑下载</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;zoujingke&quot;</span><br><span class="line">git config --global user.name &quot;zoujk640852@<span class="number">163</span>.com&quot;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>git status：查看当前仓库的状态，是否被git管理<br>git init：初始化仓库<br>git log: 查看操作日志</p><h3 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h3><p>被git管理的文件有三种状态：</p><ul><li>暂存，表示文件修改已经保存，但是尚未提交到git仓库</li><li>未修改，表示磁盘中的文件与git仓库的文件相同，没有修改</li><li>已修改，表示磁盘中文件已被修改，和git仓库中文件不同</li></ul><p>可以通过git status查看文件的状态</p><p>新添加的文件处于未跟踪状态（未被git管理）:</p><ul><li>未跟踪-&gt;暂存：git add <filename></li><li>暂存-&gt;未修改：git commit -m “xxx” 将暂存的文件存储到仓库中</li><li>未修改-&gt;修改：修改代码后，转为修改状</li><li>修改-&gt;暂存：git add <filename></li></ul><p>git add *: 将未被跟踪或者已修改的文件全部转换为暂存状态<br>git commit -a -m “xxx”: 提交所有已修改的文件（未跟踪的文件不会提交）</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>恢复文件：<br>git restore <filename> | git restore *<br>删除文件：<br>git rm <filename> 若文件当前是修改状态，不会删除文件。<br>git rm <filename> -f 强制删除<br>取消暂存状态：<br>git restore –stage<br>移动文件：（重命名）<br>git mv <oldfilename> <newfilename></p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>git在存储文件时，每一次代码的提交都会创建一个与之对应的节点，git就是通过一个一个节点来记录代码的状态。节点会构成树状结构，会存在分支，默认情况下仓库只有一个分支master。在使用git时，可以创建多个分支，分支之间相互独立，在一个分支上修改代码不会影响其它分支。在开发中，创建自己的分支，最终合并到主分支上</p><p>git branch 查看所有分支<br>git branch &lt;分支名&gt; 创建分支<br>git branch -d &lt;分支名&gt; 删除分支<br>git switch &lt;分支名&gt; 切换当前所处分支<br>git branch -c &lt;分支名&gt; 创建分支且设为当前所处分支<br>git merge &lt;分支名&gt; 将该分支合并到主分支上</p><h3 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h3><p>开发中，除了通过merge合并分支外，还可以通过变基完成分支的合并。merge合并分支时，在提交记录中会将所有的分支创建和分支合并的过程全部都显示出来，这样当项目比较复杂，开发过程比较波折时，必须要反复地创建、合并、删除分支。但是这样会使得代码的提交记录会变得极其混乱。</p><p>变基原理：</p><ol><li>当发起变基时，git会首先找到两条分支的最近的共同祖先。</li><li>对比当前分支相对于祖先的历史提交，并且将它们提取处理存储到一个临时文件中</li><li>将当前部分指向目标的基底</li><li>以当前基底开始，重新执行历史操作</li></ol><p>变基和merge对于合并分支来说最终的结果是一样的，但是变基会使得代码的提交记录会更整洁更清晰。注意！大部分情况下合并和变基是可以互换的，但是如果分支已经提交给了远程仓库，尽量不要使用变基。</p><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>以上对于git的所有操作都是在本地进行的。在开发中，我们需要一个远程的git仓库。远程的git仓库和本地的本质没有什么区别，不同点在于远程的仓库可以被多人同时访问使用，方便协同开发。实际工作中，git的服务器通常由公司搭建内部使用或是购买一些公共的私有git服务器。</p><p>学习阶段直接使用一些开放的公共git仓库。目前常用的库有两个：GitHub和Gitee（码云）</p><p>将本地库上传git：</p><p>git remote add origin <a href="mailto:&#x67;&#105;&#116;&#64;&#x67;&#105;&#116;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#109;">&#x67;&#105;&#116;&#64;&#x67;&#105;&#116;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#109;</a>:Peggyzou/-.git   origin：远程库的名字   后面为远程库的url<br>git branch -M main   修改分支的名字<br>git push -u origin main   将代码上传到服务器上</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/12/hello-world/"/>
      <url>/2023/02/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
